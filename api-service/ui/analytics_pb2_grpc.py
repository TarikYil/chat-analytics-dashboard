# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import analytics_pb2 as analytics__pb2


class AnalyticsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllAnalytics = channel.unary_unary(
                '/analytics.AnalyticsService/GetAllAnalytics',
                request_serializer=analytics__pb2.AnalyticsRequest.SerializeToString,
                response_deserializer=analytics__pb2.AnalyticsResponse.FromString,
                )
        self.GetSentimentDistribution = channel.unary_unary(
                '/analytics.AnalyticsService/GetSentimentDistribution',
                request_serializer=analytics__pb2.SentimentDistributionRequest.SerializeToString,
                response_deserializer=analytics__pb2.SentimentDistributionResponse.FromString,
                )
        self.GetCategoryDistribution = channel.unary_unary(
                '/analytics.AnalyticsService/GetCategoryDistribution',
                request_serializer=analytics__pb2.CategoryDistributionRequest.SerializeToString,
                response_deserializer=analytics__pb2.CategoryDistributionResponse.FromString,
                )
        self.GetTimeSeriesData = channel.unary_unary(
                '/analytics.AnalyticsService/GetTimeSeriesData',
                request_serializer=analytics__pb2.TimeSeriesRequest.SerializeToString,
                response_deserializer=analytics__pb2.TimeSeriesResponse.FromString,
                )
        self.GetTopKeywords = channel.unary_unary(
                '/analytics.AnalyticsService/GetTopKeywords',
                request_serializer=analytics__pb2.TopKeywordsRequest.SerializeToString,
                response_deserializer=analytics__pb2.TopKeywordsResponse.FromString,
                )
        self.GetServiceMetrics = channel.unary_unary(
                '/analytics.AnalyticsService/GetServiceMetrics',
                request_serializer=analytics__pb2.ServiceMetricsRequest.SerializeToString,
                response_deserializer=analytics__pb2.ServiceMetricsResponse.FromString,
                )
        self.GetRealTimeStats = channel.unary_unary(
                '/analytics.AnalyticsService/GetRealTimeStats',
                request_serializer=analytics__pb2.RealTimeStatsRequest.SerializeToString,
                response_deserializer=analytics__pb2.RealTimeStatsResponse.FromString,
                )


class AnalyticsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAllAnalytics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSentimentDistribution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCategoryDistribution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeSeriesData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopKeywords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRealTimeStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllAnalytics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAnalytics,
                    request_deserializer=analytics__pb2.AnalyticsRequest.FromString,
                    response_serializer=analytics__pb2.AnalyticsResponse.SerializeToString,
            ),
            'GetSentimentDistribution': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSentimentDistribution,
                    request_deserializer=analytics__pb2.SentimentDistributionRequest.FromString,
                    response_serializer=analytics__pb2.SentimentDistributionResponse.SerializeToString,
            ),
            'GetCategoryDistribution': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCategoryDistribution,
                    request_deserializer=analytics__pb2.CategoryDistributionRequest.FromString,
                    response_serializer=analytics__pb2.CategoryDistributionResponse.SerializeToString,
            ),
            'GetTimeSeriesData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimeSeriesData,
                    request_deserializer=analytics__pb2.TimeSeriesRequest.FromString,
                    response_serializer=analytics__pb2.TimeSeriesResponse.SerializeToString,
            ),
            'GetTopKeywords': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopKeywords,
                    request_deserializer=analytics__pb2.TopKeywordsRequest.FromString,
                    response_serializer=analytics__pb2.TopKeywordsResponse.SerializeToString,
            ),
            'GetServiceMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceMetrics,
                    request_deserializer=analytics__pb2.ServiceMetricsRequest.FromString,
                    response_serializer=analytics__pb2.ServiceMetricsResponse.SerializeToString,
            ),
            'GetRealTimeStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRealTimeStats,
                    request_deserializer=analytics__pb2.RealTimeStatsRequest.FromString,
                    response_serializer=analytics__pb2.RealTimeStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'analytics.AnalyticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnalyticsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAllAnalytics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetAllAnalytics',
            analytics__pb2.AnalyticsRequest.SerializeToString,
            analytics__pb2.AnalyticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSentimentDistribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetSentimentDistribution',
            analytics__pb2.SentimentDistributionRequest.SerializeToString,
            analytics__pb2.SentimentDistributionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCategoryDistribution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetCategoryDistribution',
            analytics__pb2.CategoryDistributionRequest.SerializeToString,
            analytics__pb2.CategoryDistributionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeSeriesData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetTimeSeriesData',
            analytics__pb2.TimeSeriesRequest.SerializeToString,
            analytics__pb2.TimeSeriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopKeywords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetTopKeywords',
            analytics__pb2.TopKeywordsRequest.SerializeToString,
            analytics__pb2.TopKeywordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetServiceMetrics',
            analytics__pb2.ServiceMetricsRequest.SerializeToString,
            analytics__pb2.ServiceMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRealTimeStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/analytics.AnalyticsService/GetRealTimeStats',
            analytics__pb2.RealTimeStatsRequest.SerializeToString,
            analytics__pb2.RealTimeStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
