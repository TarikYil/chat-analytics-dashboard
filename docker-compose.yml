version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: chatbot_db
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6370:6370"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - comment_analysis_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # AI Chatbot Services
  api-service:
    build:
      context: ./api-service
      dockerfile: Dockerfile.api
    container_name: api
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chatbot_db
      - POSTGRES_USER=chatbot_user
      - POSTGRES_PASSWORD=chatbot_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # volumes:
    #   - ./ai-chatbot:/app
    restart: unless-stopped
    networks:
      - comment_analysis_network

  ai-chatbot-dashboard:
    build:
      context: .
      dockerfile: ./api-service/Dockerfile.dashboard
    container_name: dashboard
    ports:
      - "8502:8501"
    environment:
      - API_URL=http://api-service:8000
    command: ["streamlit", "run", "ui/dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]
    depends_on:
      - api-service
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # gRPC Sentiment Analysis Service
  grpc-sentiment-service:
    build:
      context: ./grpc-sentiment-service
      dockerfile: Dockerfile
    container_name: grpc_sentiment
    ports:
      - "50051:50051"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # gRPC Analytics Service
  grpc-analytics-service:
    build:
      context: ./grpc-sentiment-service
      dockerfile: Dockerfile.analytics
    container_name: grpc_analytics
    ports:
      - "50052:50052"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chatbot_db
      - POSTGRES_USER=chatbot_user
      - POSTGRES_PASSWORD=chatbot_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

  # Kafka Services
  kafka-producer:
    build:
      context: ./kafka-services
      dockerfile: Dockerfile.producer
    container_name: kafka_producer
    ports:
      - "8001:8001"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

  kafka-consumer:
    build:
      context: .
      dockerfile: ./kafka-services/Dockerfile.consumer
    container_name: kafka_consumer
    ports:
      - "8002:8002"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

  kafka-analytics-consumer:
    build:
      context: .
      dockerfile: ./kafka-services/Dockerfile.analytics-consumer
    container_name: kafka_analytics_consumer
    ports:
      - "8003:8003"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chatbot_db
      - POSTGRES_USER=chatbot_user
      - POSTGRES_PASSWORD=chatbot_pass
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      kafka:
        condition: service_healthy
      grpc-analytics-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

  telegram-service:
    build:
      context: ./telegram-service
      dockerfile: Dockerfile
    container_name: telegram_service
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - comment_analysis_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  comment_analysis_network:
    driver: bridge 
